list of stuff i have to do/fix
- load all meshes in scene as a single mesh?
- we should link assimp dynamically
- In glutils, when we load the indices and then bind the buffer we pass glfloat to glVertexAttribPointer, is this correct?
- the shader programme or the shaders are not being deleted right, it leaks memory if the programme gets deleted (see 2d text class destructor)
- implement kerning in the text rendering/atlas
- change the name of the texture coords in the character struct to left right top bottom or such
- remove debug_info_box fuck that shit
- future optimization: getRigidBodyTransformSingle seems to be quite expensive, try to do something about it
- I'm still thinking about this, but the rendering of the objects should be moved to renderScene or something like that, where the scene is rendered to whatever fb is bound. This would make rendering multiple views simpler (different fbs). Also, we should make a method to change the projection matrix to whatever shader we need.
- implement a callback system for when the frame buffer is updated, I don't like having to call manually the camera and the render context (what if we have more than one of those?)
- create a render scene function that can be called from anyone from the render thread. This is to be used when other framebuffers are bound (other cameras).
- investigate  glGetError invalid operation (not caused by the render thread - App?)
- save ortho projection in the render context and have a method to get it. That's useful for when we have other framebuffers and we want to restore the default projection uniform value
- better cout/cerr/log messages
- needBroadphaseCollision could be used to filter collison between vessel parts
- thing for the far far future, disable msaa when rendering the gui
- fix ErrorCheckEndFrameSanityChecks, most likely requires buffers... :(((
- m_remove_part_constraint_buffer is unnecessary (I think)
- maybe we need a method in Vessel to remove all the childs of a part (to avoid having to call onTreeUpdate from BasePart)
- we should precomput the ortho projection matrix in the render context to avoid having to re-bind it in the shaders, and have a method that restores its value back to the uniforms
- In app, I'm changing alot from math:: to bullet math, I think I should make the attachments use bullet vectors to avoid this, and implement math::arb_perpendicular for bullet vectors.
- use make_shared for shared pointers or make_unique for unique, instead of new (the clone method should probable take a shared pointer for that particular case?)
- investigate why CG_RAY_EDITOR_RADIAL doesn't seem to be working, but it still seems to be working? When we clone a subtree we don't need to ~CG_RAY_EDITOR_RADIAL to the mask, for some reason??
- need a utils file that converts math/dmath:: to bulletMath and viceversa
- check for leaks in planet
- classes should have the frame time (1/60)
- cleanup planet side render (the function)
- there might be invalid writes/reads in the log file
- add special debug menu in the editor
- the physics engine should have access to the asset manager
- the add_vessel_buffer might be unnecessary in the case of decouplings, but can be useful to add vessels with parts that are not in the dynamics world
- in the future we might not need to update all the coms synchronously, only the player vessel
- basepart should have a boolean that indicates if that part has been started already via staging, this way we can avoid including it again after being activated, if the part below it was a separator and forced a staging update
- reference_ellipse_to_xyz doesn't work right when lat or long is not equal to 0
- object view distance is missing on the buffer update method in the asset manager
- we should add a macro that avoids having to compile with the parts (assets/parts/) in, for example, the planetarium. That way we wouldn't need them in PLANETARIUMOBJS (now automatically included in ASSETSSRCS)

Interesting links:
- things about planets:
    - https://pybullet.org/Bullet/phpBB3/viewtopic.php?t=11560
- planet rendering/reentry effects, etc
    - http://leah-lindner.com/blog/
    - http://leah-lindner.com/img/blog/planet_renderer/week5-6/researchPaper.pdf
- ksp implementation of things: 
    - https://www.youtube.com/watch?v=mXTxQko-JH0&feature=youtu.be&t=24m31s
- picking bullet (to do at some point)
    - https://www.opengl-tutorial.org/miscellaneous/clicking-on-objects/picking-with-a-physics-library/
- interesting opengl stuff
    - https://www.songho.ca/opengl/
- newtonian trajectories
    - www.roesle.org/cms25/index.php/projects/81-general/95-on-newtonian-trajectories-in-kerbal-space-program
- rockets
    - https://www.grc.nasa.gov/WWW/BGH/lrockth.html
- architectures
    - https://software.intel.com/content/www/us/en/develop/articles/designing-the-framework-of-a-parallel-game-engine.html
    - https://www.gamasutra.com/view/feature/130247/multithreaded_game_engine_.php?print=1
- cdlod or something like that, READ IT!!
    - http://hhoppe.com/geomclipmap.pdf
    - http://hhoppe.com/gpugcm.pdf

about IDS:
    To manage parts, parts instances and vessels we will have a system of ids. For parts instances and vessels I'll have a file with functions that will manage the creation and deletion of the ids. It won't be a class, it will have a static variable pointing to the memory structure with the necessary fields. When something requests a new id, the file should create a random integer which will be added to a unordered set (that contains the rest of the ids), if there's a collision it will generate a new int until it finds a unique one. It should be possible to request adding a specific id (useful for loading stuff), but if a collision occurs (unlikely) something should be done about it... We should have a set for every id list (2 for now)

    For the parts it should be easier. I'm still thinking about how to generate them. We could preassign ids like we do now, but the main problem is mods in the future. I think a good way to avoid collisions is to make a hash out of the name of the part.