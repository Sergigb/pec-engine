list of stuff i have to do/fix
- load all meshes in scene as a single mesh?
- we should link assimp dynamically
- In glutils, when we load the indices and then bind the buffer we pass glfloat to glVertexAttribPointer, is this correct?
- the shader programme or the shaders are not being deleted right, it leaks memory if the programme gets deleted (see 2d text class destructor)
- implement kerning in the text rendering/atlas
- change the name of the texture coords in the character struct to left right top bottom or such
- new file structure (render folder, physics folder, game? folder etc)
- remove debug_info_box fuck that shit
- future optimization: getRigidBodyTransformSingle seems to be quite expensive, try to do something about it
- IMPORTANT: fix glBindVertexArray calls in Text2D, maybe other places???
- check model destructor, doesnt check if the buffers are initialised
- move the render buffers to the btwrapper class?
- useProgram should be used in RenderContext too
- I'm still thinking about this, but the rendering of the objects should be moved to renderScene or something like that, where the scene is rendered to whatever fb is bound. This would make rendering multiple views simpler (different fbs). Also, we should make a method to change the projection matrix to whatever shader we need.
- implement a callback system for when the frame buffer is updated, I don't like having to call manually the camera and the render context (what if we have more than one of those?)
- create a render scene function that can be called from anyone from the render thread. This is to be used when other framebuffers are bound (other cameras).
- check that all the methods are using bindProgram and bindVao
- disable depth test should be called in the gui render function, not in the render context - no it should not, the same shit goes for the text - it causes depth error in the gui -> fix
- investigate  glGetError invalid operation (not caused by the render thread - App?)
- save ortho projection in the render context and have a method to get it. That's useful for when we have other framebuffers and we want to restore the default projection uniform value
- decide what to do with useProgram and bindVao...
- I dont like dynamic casts in the render function, why not let the object decide wether to draw the att points or not? the render context should have a boolean to keep track of wether the game is paused or not
- shader hot reloading should be possible
- better cout/cerr/log messages
- remove childs in Vessel shoudl check if the parent is nullptr (or just root?)
- needBroadphaseCollision could be used to filter collison between vessel parts
- new camera management is needed
- move all hpp/h includes to the cpp's, forward declare stuff
- remove input from camera class, create player class
- thing for the far far future, disable msaa when rendering the gui
- fix ErrorCheckEndFrameSanityChecks, most likely requires buffers... :(((
- m_remove_part_constraint_buffer is unnecessary (I think)
- avoid using m_dynamics_world to get the object in the world, just use the arrays in the asset manager 


Interesting links:
- things about planets:
    - https://pybullet.org/Bullet/phpBB3/viewtopic.php?t=11560
- planet rendering/reentry effects, etc
    - http://leah-lindner.com/blog/
    - http://leah-lindner.com/img/blog/planet_renderer/week5-6/researchPaper.pdf
- ksp implementation of things: 
    - https://www.youtube.com/watch?v=mXTxQko-JH0&feature=youtu.be&t=24m31s
- picking bullet (to do at some point)
    - https://www.opengl-tutorial.org/miscellaneous/clicking-on-objects/picking-with-a-physics-library/
- interesting opengl stuff
    - https://www.songho.ca/opengl/
- newtonian trajectories
    - www.roesle.org/cms25/index.php/projects/81-general/95-on-newtonian-trajectories-in-kerbal-space-program
- rockets
    - https://www.grc.nasa.gov/WWW/BGH/lrockth.html
- architectures
    - https://software.intel.com/content/www/us/en/develop/articles/designing-the-framework-of-a-parallel-game-engine.html
    - https://www.gamasutra.com/view/feature/130247/multithreaded_game_engine_.php?print=1
- cdlod or something like that, READ IT!!
    - http://hhoppe.com/geomclipmap.pdf
    - http://hhoppe.com/gpugcm.pdf

about IDS:
    To manage parts, parts instances and vessels we will have a system of ids. For parts instances and vessels I'll have a file with functions that will manage the creation and deletion of the ids. It won't be a class, it will have a static variable pointing to the memory structure with the necessary fields. When something requests a new id, the file should create a random integer which will be added to a unordered set (that contains the rest of the ids), if there's a collision it will generate a new int until it finds a unique one. It should be possible to request adding a specific id (useful for loading stuff), but if a collision occurs (unlikely) something should be done about it... We should have a set for every id list (2 for now)

    For the parts it should be easier. I'm still thinking about how to generate them. We could preassign ids like we do now, but the main problem is mods in the future. I think a good way to avoid collisions is to make a hash out of the name of the part.